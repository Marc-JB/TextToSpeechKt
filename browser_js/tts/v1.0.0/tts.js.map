{"version":3,"sources":["webpack://tts/webpack/universalModuleDefinition","webpack://tts/webpack/bootstrap","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/runtime/coreRuntime.kt","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/build/jsMainSources/libraries/stdlib/js/src/kotlin/dynamic.kt","webpack://tts/../../../../../<js-code>","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/runtime/hacks.kt","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/runtime/long.kt","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/runtime/longjs.kt","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/runtime/reflectRuntime.kt","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/runtime/typeCheckUtils.kt","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/src/kotlin/exceptions.kt","webpack://tts/../../../../..//mnt/agent/work/88b0986a7186d029/atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/Trace.common.kt","webpack://tts/../../../../..//mnt/agent/work/88b0986a7186d029/atomicfu/src/jsMain/kotlin/kotlinx/atomicfu/AtomicFU.kt","webpack://tts/C:/Users/Marc/Documents/Development/TextToSpeechKt/tts/src/browserMain/kotlin/nl/marc_apps/tts/TextToSpeech.kt","webpack://tts/C:/Users/Marc/Documents/Development/TextToSpeechKt/tts/src/browserMain/kotlin/nl/marc_apps/tts/TextToSpeechInstanceJS.kt","webpack://tts/C:/Users/Marc/Documents/Development/TextToSpeechKt/tts/src/browserMain/kotlin/nl/marc_apps/tts/TextToSpeechJS.kt","webpack://tts/C:/Users/Marc/Documents/Development/TextToSpeechKt/tts/src/browserMain/kotlin/org/w3c/speech/WindowExtensions.kt","webpack://tts/C:/Users/Marc/Documents/Development/TextToSpeechKt/tts/src/commonMain/kotlin/nl/marc_apps/tts/TextToSpeechInstance.kt","webpack://tts/C:/Users/Marc/Documents/Development/TextToSpeechKt/tts/src/commonMain/kotlin/nl/marc_apps/tts/errors/TextToSpeechInitialisationErrors.kt","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/build/commonMainSources/libraries/stdlib/src/kotlin/properties/PropertyReferenceDelegates.kt","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/build/commonMainSources/libraries/stdlib/src/kotlin/util/Standard.kt","webpack://tts/../../../../..//mnt/agent/work/c5a36d4d82b914cf/kotlin/libraries/stdlib/js-ir/builtins/Library.kt","webpack://tts/C:/Users/Marc/Documents/Development/TextToSpeechKt/tts/src/browserMain/kotlin/Main.kt"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s"],"mappings":"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","file":"tts.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tts\"] = factory();\n\telse\n\t\troot[\"tts\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n",null,null,null,null,null,null,null,null,null,null,null,"package nl.marc_apps.tts\r\n\r\nimport kotlinx.browser.window\r\nimport nl.marc_apps.tts.errors.TextToSpeechNotSupportedError\r\nimport kotlin.coroutines.resume\r\nimport kotlin.coroutines.suspendCoroutine\r\nimport kotlin.js.Promise\r\n\r\n/**\r\n * Functions and properties that can be used to create new TTS instances\r\n * and check for compatibility issues.\r\n */\r\n@ExperimentalJsExport\r\nactual object TextToSpeech {\r\n    actual val isSupported = js(\"\\\"speechSynthesis\\\" in window\") as Boolean\r\n\r\n    actual val canChangeVolume = true\r\n\r\n    /**\r\n     * Creates a new [TextToSpeechInstanceWithJsPromises].\r\n     * @throws TextToSpeechNotSupportedError when TTS is not supported.\r\n     */\r\n    fun createOrThrowSync(context: Context = window): TextToSpeechInstanceWithJsPromises {\r\n        if(isSupported) return TextToSpeechJS(context)\r\n        else throw TextToSpeechNotSupportedError()\r\n    }\r\n\r\n    /**\r\n     * Creates a new [TextToSpeechInstanceWithJsPromises].\r\n     * Will return null if TTS is not supported.\r\n     */\r\n    fun createOrNullSync(context: Context = window): TextToSpeechInstanceWithJsPromises? {\r\n        return if(isSupported) TextToSpeechJS(context) else null\r\n    }\r\n\r\n    /**\r\n     * Creates a new [TextToSpeechInstance].\r\n     * Will call [callback] with null if TTS is not supported.\r\n     */\r\n    actual fun createOrNull(context: Context, callback: (TextToSpeechInstance?) -> Unit) {\r\n        callback(createOrNullSync(context))\r\n    }\r\n\r\n    /**\r\n     * Creates a new [TextToSpeechInstance].\r\n     * Will do nothing and will not execute [callback] when TTS is not supported.\r\n     */\r\n    actual fun createOrNothing(context: Context, callback: (TextToSpeechInstance) -> Unit) {\r\n        if(isSupported) callback(TextToSpeechJS(context))\r\n    }\r\n\r\n    /** Creates a new [TextToSpeechInstance]. */\r\n    actual fun create(context: Context, callback: (Result<TextToSpeechInstance>) -> Unit) {\r\n        try {\r\n            callback(Result.success(createOrThrowSync(context)))\r\n        } catch (error: Throwable) {\r\n            callback(Result.failure(error))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new [TextToSpeechInstanceWithJsPromises].\r\n     * @throws TextToSpeechNotSupportedError when TTS is not supported.\r\n     */\r\n    fun create(context: Context = window): Promise<TextToSpeechInstanceWithJsPromises> {\r\n        return try {\r\n            Promise.resolve(createOrThrowSync(context))\r\n        } catch (error: Throwable) {\r\n            Promise.reject(error)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new [TextToSpeechInstance].\r\n     * @throws TextToSpeechNotSupportedError when TTS is not supported.\r\n     */\r\n    actual suspend fun createOrThrow(context: Context): TextToSpeechInstance = suspendCoroutine { cont ->\r\n        create(context) {\r\n            cont.resumeWith(it)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new [TextToSpeechInstance].\r\n     * Will return null if TTS is not supported.\r\n     */\r\n    actual suspend fun createOrNull(context: Context): TextToSpeechInstance? = suspendCoroutine { cont ->\r\n        createOrNull(context) {\r\n            cont.resume(it)\r\n        }\r\n    }\r\n}\r\n","package nl.marc_apps.tts\r\n\r\n/**\r\n * Use from JavaScript/TypeScript code only. Use the [TextToSpeechInstance] interface from Kotlin code.\r\n * A TTS instance. Should be [close]d when no longer in use.\r\n */\r\n@ExperimentalJsExport\r\n@JsExport\r\nclass TextToSpeechInstanceJS internal constructor(private val ttsInstance: TextToSpeechInstance) {\r\n    /**\r\n     * The output volume, which is an integer between 0 and 100, set to 100(%) by default.\r\n     * Changes only affect new calls to the [enqueue] method.\r\n     */\r\n    var volume: Int by ttsInstance::volume\r\n\r\n    /**\r\n     * Alternative to setting [volume] to zero.\r\n     * Setting this to true (and back to false) doesn't change the value of [volume].\r\n     * Changes only affect new calls to the [enqueue] method.\r\n     */\r\n    var isMuted: Boolean by ttsInstance::isMuted\r\n\r\n    var pitch: Float by ttsInstance::pitch\r\n\r\n    var rate: Float by ttsInstance::rate\r\n\r\n    /**\r\n     * Returns a BCP 47 language tag of the selected voice on supported platforms.\r\n     * May return the language code as ISO 639 on older platforms.\r\n     */\r\n    val language: String by ttsInstance::language\r\n\r\n    /** Adds the given [text] to the internal queue, unless [isMuted] is true or [volume] equals 0. */\r\n    fun enqueue(text: String, clearQueue: Boolean = false) = ttsInstance.enqueue(text, clearQueue)\r\n\r\n    /** Clears the internal queue, but doesn't close used resources. */\r\n    fun stop() = ttsInstance.stop()\r\n\r\n    /** Clears the internal queue and closes used resources (if possible) */\r\n    fun close() = ttsInstance.close()\r\n}\r\n","@file:Suppress(\"unused\")\r\n\r\npackage nl.marc_apps.tts\r\n\r\nimport kotlinx.browser.window\r\nimport nl.marc_apps.tts.errors.UnknownTextToSpeechSynthesisError\r\nimport org.w3c.dom.Window\r\nimport org.w3c.speech.SpeechSynthesis\r\nimport org.w3c.speech.SpeechSynthesisUtterance\r\nimport org.w3c.speech.speechSynthesis\r\nimport kotlin.coroutines.resume\r\nimport kotlin.coroutines.resumeWithException\r\nimport kotlin.coroutines.suspendCoroutine\r\nimport kotlin.js.Promise\r\n\r\n/** A TTS instance. Should be [close]d when no longer in use. */\r\n@ExperimentalJsExport\r\ninternal class TextToSpeechJS(context: Window = window) : TextToSpeechInstanceWithJsPromises {\r\n    private val speechSynthesis: SpeechSynthesis = context.speechSynthesis\r\n\r\n    private var speechSynthesisUtterance = SpeechSynthesisUtterance()\r\n\r\n    private val internalVolume: Float\r\n        get() = if(!isMuted) volume / 100f else 0f\r\n\r\n    /**\r\n     * The output volume, which is an integer between 0 and 100, set to 100(%) by default.\r\n     * Changes only affect new calls to the [say] method.\r\n     */\r\n    override var volume: Int = TextToSpeechInstance.VOLUME_DEFAULT\r\n        set(value) {\r\n            field = when {\r\n                value < TextToSpeechInstance.VOLUME_MIN -> TextToSpeechInstance.VOLUME_MIN\r\n                value > TextToSpeechInstance.VOLUME_MAX -> TextToSpeechInstance.VOLUME_MAX\r\n                else -> value\r\n            }\r\n            speechSynthesisUtterance.volume = internalVolume\r\n        }\r\n\r\n    /**\r\n     * Alternative to setting [volume] to zero.\r\n     * Setting this to true (and back to false) doesn't change the value of [volume].\r\n     * Changes only affect new calls to the [say] method.\r\n     */\r\n    override var isMuted = false\r\n        set(value) {\r\n            field = value\r\n            speechSynthesisUtterance.volume = internalVolume\r\n        }\r\n\r\n    override var pitch = TextToSpeechInstance.VOICE_PITCH_DEFAULT\r\n        set(value) {\r\n            field = value\r\n            speechSynthesisUtterance.pitch = value\r\n        }\r\n\r\n    override var rate = TextToSpeechInstance.VOICE_RATE_DEFAULT\r\n        set(value) {\r\n            field = value\r\n            speechSynthesisUtterance.rate = value\r\n        }\r\n\r\n    /**\r\n     * Returns a BCP 47 language tag of the selected voice on supported platforms.\r\n     * May return the language code as ISO 639 on older platforms.\r\n     */\r\n    override val language: String\r\n        get() = speechSynthesisUtterance.voice.lang\r\n\r\n    private fun resetCurrentUtterance() {\r\n        speechSynthesisUtterance = SpeechSynthesisUtterance().also {\r\n            it.volume = internalVolume\r\n            it.pitch = pitch\r\n            it.rate = rate\r\n        }\r\n    }\r\n\r\n    /** Adds the given [text] to the internal queue, unless [isMuted] is true or [volume] equals 0. */\r\n    override fun enqueue(text: String, clearQueue: Boolean) {\r\n        if(isMuted || internalVolume == 0f) {\r\n            if(clearQueue) stop()\r\n            return\r\n        }\r\n\r\n        speechSynthesisUtterance.text = text\r\n        speechSynthesis.speak(speechSynthesisUtterance)\r\n\r\n        resetCurrentUtterance()\r\n    }\r\n\r\n    /** Adds the given [text] to the internal queue, unless [isMuted] is true or [volume] equals 0. */\r\n    override fun say(text: String, clearQueue: Boolean, callback: (Result<TextToSpeechInstance.Status>) -> Unit) {\r\n        if(isMuted || internalVolume == 0f) {\r\n            if(clearQueue) stop()\r\n            callback(Result.success(TextToSpeechInstance.Status.FINISHED))\r\n            return\r\n        }\r\n\r\n        speechSynthesisUtterance.onstart = {\r\n            callback(Result.success(TextToSpeechInstance.Status.STARTED))\r\n        }\r\n        speechSynthesisUtterance.onend = {\r\n            callback(Result.success(TextToSpeechInstance.Status.FINISHED))\r\n        }\r\n\r\n        enqueue(text, clearQueue)\r\n    }\r\n\r\n    /** Adds the given [text] to the internal queue, unless [isMuted] is true or [volume] equals 0. */\r\n    override suspend fun say(text: String, clearQueue: Boolean, resumeOnStatus: TextToSpeechInstance.Status) {\r\n        suspendCoroutine<Unit> { cont ->\r\n            say(text, clearQueue) {\r\n                if (it.isSuccess && it.getOrNull() in arrayOf(resumeOnStatus, TextToSpeechInstance.Status.FINISHED)) {\r\n                    cont.resume(Unit)\r\n                } else if (it.isFailure) {\r\n                    val error = it.exceptionOrNull() ?: UnknownTextToSpeechSynthesisError()\r\n                    cont.resumeWithException(error)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Adds the given [text] to the internal queue, unless [isMuted] is true or [volume] equals 0. */\r\n    override fun sayJsPromise(\r\n        text: String,\r\n        clearQueue: Boolean,\r\n        resumeOnStatus: TextToSpeechInstance.Status\r\n    ): Promise<Unit> {\r\n        return Promise { success, failure ->\r\n            say(text, clearQueue) {\r\n                if (it.isSuccess && it.getOrNull() in arrayOf(resumeOnStatus, TextToSpeechInstance.Status.FINISHED)) {\r\n                    success(Unit)\r\n                } else if (it.isFailure) {\r\n                    val error = it.exceptionOrNull() ?: UnknownTextToSpeechSynthesisError()\r\n                    failure(error)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Adds the given [text] to the internal queue, unless [isMuted] is true or [volume] equals 0. */\r\n    override fun plusAssign(text: String) {\r\n        enqueue(text, false)\r\n    }\r\n\r\n    /** Clears the internal queue, but doesn't close used resources. */\r\n    override fun stop() {\r\n        speechSynthesis.cancel()\r\n    }\r\n\r\n    /** Clears the internal queue and closes used resources (if possible) */\r\n    override fun close() {\r\n        speechSynthesis.cancel()\r\n    }\r\n}\r\n","@file:Suppress(\"unused\")\r\n\r\npackage org.w3c.speech\r\n\r\nimport org.w3c.dom.Window\r\n\r\ninline val Window.speechSynthesis: SpeechSynthesis\r\n    get() = asDynamic().speechSynthesis as SpeechSynthesis\r\n","package nl.marc_apps.tts\r\n\r\n/** A TTS instance. Should be [close]d when no longer in use. */\r\ninterface TextToSpeechInstance : Closeable {\r\n    /**\r\n     * The output volume, which is an integer between 0 and 100, set to 100(%) by default.\r\n     * Changes only affect new calls to the [say] method.\r\n     */\r\n    var volume: Int\r\n\r\n    /**\r\n     * Alternative to setting [volume] to zero.\r\n     * Setting this to true (and back to false) doesn't change the value of [volume].\r\n     * Changes only affect new calls to the [say] method.\r\n     */\r\n    var isMuted: Boolean\r\n\r\n    var pitch: Float\r\n\r\n    var rate: Float\r\n\r\n    /**\r\n     * Returns a BCP 47 language tag of the selected voice on supported platforms.\r\n     * May return the language code as ISO 639 on older platforms.\r\n     */\r\n    val language: String\r\n\r\n    /** Adds the given [text] to the internal queue, unless [isMuted] is true or [volume] equals 0. */\r\n    fun enqueue(text: String, clearQueue: Boolean = false)\r\n\r\n    /** Adds the given [text] to the internal queue, unless [isMuted] is true or [volume] equals 0. */\r\n    fun say(text: String, clearQueue: Boolean = false, callback: (Result<Status>) -> Unit)\r\n\r\n    /** Adds the given [text] to the internal queue, unless [isMuted] is true or [volume] equals 0. */\r\n    suspend fun say(text: String, clearQueue: Boolean = false, resumeOnStatus: Status = Status.FINISHED)\r\n\r\n    /** Adds the given [text] to the internal queue, unless [isMuted] is true or [volume] equals 0. */\r\n    operator fun plusAssign(text: String)\r\n\r\n    /** Clears the internal queue, but doesn't close used resources. */\r\n    fun stop()\r\n\r\n    /** Clears the internal queue and closes used resources (if possible) */\r\n    override fun close()\r\n\r\n    enum class Status {\r\n        STARTED, FINISHED\r\n    }\r\n\r\n    companion object {\r\n        const val VOLUME_MIN = 0\r\n\r\n        const val VOLUME_MAX = 100\r\n\r\n        const val VOLUME_DEFAULT = VOLUME_MAX\r\n\r\n        const val VOICE_PITCH_DEFAULT = 1f\r\n\r\n        const val VOICE_RATE_DEFAULT = 1f\r\n    }\r\n}\r\n","package nl.marc_apps.tts.errors\r\n\r\n/** Error that is thrown when creating a [nl.marc_apps.tts.TextToSpeechInstance] fails. */\r\nsealed class TextToSpeechInitialisationError(\r\n    message: String? = \"Error while trying to load Text-to-Speech service\",\r\n    cause: Throwable? = null\r\n) : Exception(message, cause)\r\n\r\n/** Error that is thrown when creating a [nl.marc_apps.tts.TextToSpeechInstance] fails. */\r\nclass UnknownTextToSpeechInitialisationError(\r\n    cause: Throwable? = null\r\n) : TextToSpeechInitialisationError(cause = cause)\r\n\r\n/** Error that is thrown when a platform does not have TTS support */\r\nclass TextToSpeechNotSupportedError(\r\n    cause: Throwable? = null\r\n) : TextToSpeechInitialisationError(\"Text-to-Speech is not supported on this platform\", cause)\r\n\r\n/** Error that is thrown on some Samsung devices while creating a TTS instance. */\r\nclass TextToSpeechSecurityError(\r\n    cause: Throwable? = null\r\n) : TextToSpeechInitialisationError(\"Text-to-Speech security error\", cause)\r\n",null,null,null,"import nl.marc_apps.tts.TextToSpeech\r\nimport nl.marc_apps.tts.TextToSpeechInstance\r\nimport nl.marc_apps.tts.TextToSpeechInstanceJS\r\nimport nl.marc_apps.tts.errors.TextToSpeechNotSupportedError\r\n\r\n/**\r\n * Use from JavaScript/TypeScript code only. Use the [TextToSpeech] object from Kotlin code.\r\n */\r\n@ExperimentalJsExport\r\n@JsExport\r\nval isTtsSupported = TextToSpeech.isSupported\r\n\r\n/**\r\n * Use from JavaScript/TypeScript code only. Use the [TextToSpeech] object from Kotlin code.\r\n */\r\n@ExperimentalJsExport\r\n@JsExport\r\nval canChangeTtsVolume = TextToSpeech.canChangeVolume\r\n\r\n/**\r\n * Use from JavaScript/TypeScript code only. Use the [TextToSpeech] object from Kotlin code.\r\n * Creates a new [TextToSpeechInstance].\r\n * @throws TextToSpeechNotSupportedError when TTS is not supported.\r\n */\r\n@ExperimentalJsExport\r\n@JsExport\r\nfun createTtsOrThrow() = TextToSpeechInstanceJS(TextToSpeech.createOrThrowSync())\r\n\r\n/**\r\n * Use from JavaScript/TypeScript code only. Use the [TextToSpeech] object from Kotlin code.\r\n * Creates a new [TextToSpeechInstance].\r\n * Will return null if TTS is not supported.\r\n */\r\n@ExperimentalJsExport\r\n@JsExport\r\nfun createTtsOrNull() = TextToSpeech.createOrNullSync()?.let { TextToSpeechInstanceJS(it) }\r\n"],"sourceRoot":""}